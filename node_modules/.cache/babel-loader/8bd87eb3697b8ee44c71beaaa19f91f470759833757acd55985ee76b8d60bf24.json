{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { fetchStart, loginSuccess, logoutSuccess, registerSuccess, fetchFail } from \"../features/authSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toastErrorNotify, toastSuccessNotify } from \"../helper/ToastNotify\";\nconst useAuthCalls = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const BASE_URL = \"https://10001.fullstack.clarusway.com/\";\n  const login = async userInfo => {\n    dispatch(fetchStart());\n    try {\n      const {\n        data\n      } = await axios.post(`${BASE_URL}account/auth/login/`, userInfo);\n      dispatch(loginSuccess(data));\n      toastSuccessNotify(\"Login performed\");\n      navigate(\"/stock\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Login can not be performed\");\n    }\n  };\n  const logout = async () => {\n    dispatch(fetchStart());\n    try {\n      await axios.post(`${BASE_URL}account/auth/logout/`);\n      dispatch(logoutSuccess());\n      toastSuccessNotify(\"Logout performed\");\n      navigate(\"/\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Logout can not be performed\");\n    }\n  };\n  const register = async userInfo => {\n    dispatch(fetchStart());\n    try {\n      const {\n        data\n      } = await axios.post(`${BASE_URL}account/register/`, userInfo);\n      dispatch(registerSuccess(data));\n      toastSuccessNotify(\"Register performed\");\n      navigate(\"/stock\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Register can not be performed\");\n    }\n  };\n  return {\n    login,\n    logout,\n    register\n  };\n};\n_s(useAuthCalls, \"R1L93MxeLXzQXESpmjjjQSuQgvM=\", false, function () {\n  return [useDispatch, useNavigate];\n});\nexport default useAuthCalls;","map":{"version":3,"names":["useDispatch","axios","fetchStart","loginSuccess","logoutSuccess","registerSuccess","fetchFail","useNavigate","toastErrorNotify","toastSuccessNotify","useAuthCalls","_s","dispatch","navigate","BASE_URL","login","userInfo","data","post","err","logout","register"],"sources":["/Users/macbookair/Desktop/stock-app/stock_app/src/hooks/useAuthCalls.jsx"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport {\n  fetchStart,\n  loginSuccess,\n  logoutSuccess,\n  registerSuccess,\n  fetchFail,\n} from \"../features/authSlice\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { toastErrorNotify, toastSuccessNotify } from \"../helper/ToastNotify\";\n\nconst useAuthCalls = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const BASE_URL = \"https://10001.fullstack.clarusway.com/\";\n\n  const login = async (userInfo) => {\n    dispatch(fetchStart());\n    try {\n      const { data } = await axios.post(\n        `${BASE_URL}account/auth/login/`,\n        userInfo\n      );\n\n      dispatch(loginSuccess(data));\n      toastSuccessNotify(\"Login performed\");\n      navigate(\"/stock\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Login can not be performed\");\n    }\n  };\n\n  const logout = async () => {\n    dispatch(fetchStart());\n    try {\n      await axios.post(`${BASE_URL}account/auth/logout/`);\n      dispatch(logoutSuccess());\n      toastSuccessNotify(\"Logout performed\");\n      navigate(\"/\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Logout can not be performed\");\n    }\n  };\n\n  const register = async (userInfo) => {\n    dispatch(fetchStart());\n    try {\n      const { data } = await axios.post(\n        `${BASE_URL}account/register/`,\n        userInfo\n      );\n      dispatch(registerSuccess(data));\n      toastSuccessNotify(\"Register performed\");\n      navigate(\"/stock\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Register can not be performed\");\n    }\n  };\n\n  return {\n    login,\n    logout,\n    register,\n  };\n};\n\nexport default useAuthCalls;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,eAAe,EACfC,SAAS,QACJ,uBAAuB;AAE9B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,uBAAuB;AAE5E,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,QAAQ,GAAG,wCAAwC;EAEzD,MAAMC,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAChCJ,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC;IACtB,IAAI;MACF,MAAM;QAAEe;MAAK,CAAC,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAC9B,GAAEJ,QAAS,qBAAoB,EAChCE,QACF,CAAC;MAEDJ,QAAQ,CAACT,YAAY,CAACc,IAAI,CAAC,CAAC;MAC5BR,kBAAkB,CAAC,iBAAiB,CAAC;MACrCI,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZP,QAAQ,CAACN,SAAS,CAAC,CAAC,CAAC;MACrBE,gBAAgB,CAAC,4BAA4B,CAAC;IAChD;EACF,CAAC;EAED,MAAMY,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBR,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC;IACtB,IAAI;MACF,MAAMD,KAAK,CAACiB,IAAI,CAAE,GAAEJ,QAAS,sBAAqB,CAAC;MACnDF,QAAQ,CAACR,aAAa,CAAC,CAAC,CAAC;MACzBK,kBAAkB,CAAC,kBAAkB,CAAC;MACtCI,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZP,QAAQ,CAACN,SAAS,CAAC,CAAC,CAAC;MACrBE,gBAAgB,CAAC,6BAA6B,CAAC;IACjD;EACF,CAAC;EAED,MAAMa,QAAQ,GAAG,MAAOL,QAAQ,IAAK;IACnCJ,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC;IACtB,IAAI;MACF,MAAM;QAAEe;MAAK,CAAC,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAC9B,GAAEJ,QAAS,mBAAkB,EAC9BE,QACF,CAAC;MACDJ,QAAQ,CAACP,eAAe,CAACY,IAAI,CAAC,CAAC;MAC/BR,kBAAkB,CAAC,oBAAoB,CAAC;MACxCI,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZP,QAAQ,CAACN,SAAS,CAAC,CAAC,CAAC;MACrBE,gBAAgB,CAAC,+BAA+B,CAAC;IACnD;EACF,CAAC;EAED,OAAO;IACLO,KAAK;IACLK,MAAM;IACNC;EACF,CAAC;AACH,CAAC;AAACV,EAAA,CAzDID,YAAY;EAAA,QACCV,WAAW,EACXO,WAAW;AAAA;AAyD9B,eAAeG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}